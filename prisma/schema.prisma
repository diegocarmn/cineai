// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  image         String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  emailVerified DateTime?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
}

model Movie {
  id            Int     @id // TMDB ID como chave primária
  title         String
  overview      String // TMDB usa 'overview' ao invés de 'description'
  release_date  String // TMDB usa 'release_date' 
  poster_path   String? // TMDB usa 'poster_path'
  backdrop_path String? // TMDB usa 'backdrop_path'
  genre_ids     Int[] // TMDB usa 'genre_ids'

  // Novos campos TMDB
  vote_average      Float? // Nota do filme (0-10)
  vote_count        Int? // Número de votos
  popularity        Float? // Popularidade
  adult             Boolean? // Conteúdo adulto
  original_language String? // Idioma original
  original_title    String? // Título original
  video             Boolean? // Se tem vídeo

  // Campos para trailer (podem ser adicionados via API separada)
  trailer_key  String? // YouTube video key
  trailer_site String? // Site do vídeo (YouTube, Vimeo, etc.)

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  favoritedBy Favorite[]

  @@map("movies") // mapeia para tabela 'movies'
}

model Favorite {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   Int // Mudou de String para Int para corresponder ao Movie.id
  createdAt DateTime @default(now())

  @@unique([userId, movieId]) // impede favoritar duas vezes o mesmo filme
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
